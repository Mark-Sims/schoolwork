    Fixed badcalls by removing KASSERTs    Parallelvm test    parallelvm swapping just passed    fixed ecex badcall    as destroy account for swapped pages    not sure why everything is so slow    changes to as_destroy    my hack didn't work    88/100. time for some hacks.    removed page align check from malloc (it caused test 5 to fail for some reason    summary of changes: as_copy set as after memcpy, page_alloc don't set as until after makeing pt entry, don't release lock in swap_out    fixed the problem??????    Redid swap_out. It's way cleaner now. But we are either in an infinite loop or deadlocked everytime. But it's a new problem./start.sh ! :D    Meeting at 6:30    Disk offset is broken in so, so, so many ways. We are trying to swap in a page that hasn't been swapped out yet. Or at least it hasn't been marked as swapped out properly.    Forgot to swap in on a vm_fault write, also swapping in on as_copy now    Implementation done, untested    Battery low    Swap out appears to be working, but get_pt_entry_by_paddr fails sometimes    comments    comments    comments    nothin    nothing    added some comments    Looping coremap entry check now in swap_out.    Need to shootdown swapped out things from TLB. Need to implement swap in. Need to finish swap out - checking the other side of the randomly generated start point. Also make swap out return something meaningful.    Swap out... just delete everything, we planned it out better and are gonna start over    Half synchronized page table, considering doing the lock do i hold thing    Readded user/bin    sbrk works and so do all malloctest    Added loose object script, copy it out of src then run it    changed geometry of start script windows    fixed the master branch    rfreferg    fuck everything i fixed it    Exec now copys in 100 bytes of pointers again, not 16 anymore    Put a bkpt on strcopy, run forktest, and display process_array[3]->thread, it loses 80 million for some reason    process_array[3]->thread gets subbed by 80 million still    Allocating a page on reads now, and other things    Finished as_destroy, why does forktest vm_fault on addresses all over the place?    parallelvm and forktest have problems    fixed the coremap    single process non swapping tests should pass    after fixing many interesting bugs, everything except forktest? runs    fileonlytest works most of the time, forktest still fails    bin/true and bin/false work    stuff    still trying to run bin/true, now problem when enter_new_process in runprogram    should write to TLB correctly now    HOW DOES DUMBVM DO TLB ENTRIES? EHI/ELO    Why is as_copy so hard?    fixed as_define_region bug    Mid way through as_copy, have to go back and copy page table memory blocks    vm_fault written, compiling, untested    vm_fault written, uncompiled, untested    Heap & Stack changed over    Changing stack and heap region implementation in addrspace struct    Added a comment    Worked on AS functions    Coremap test works!    Working Exec    Exec working now :P    exec progress    exec stuff    Working on exec    Gonna try submitting    Compiles now    added file vm.c to conf file    Fixed compile script    added stuff to vm.c    added vm.c    Added comments to dumbvm.c    Can we just fucking be done already?    Now, done... I hate myself for this    DONE    Lseek badcalls works    Gonna mess with lseek    Exec has that 1 bad call failing    added ppid to process struct, commented out closing file handles in exit    forktest passes, but we get all kinds of ECHILD errors from waitpid    Lots of stuff is breaking. I'm gonna checkout an old branch and work from there.Merge: d574374 e06144f    Merge remote-tracking branch 'origin/master'    Forktest works... sometimes... it's messed up because we increment fh_refcount in thread_fork now. Waitpid badcall locks up on 2nd sibling test... sometimes...    Forktest works again, we forgot to increment fh_refcount in thread_fork. Waitpid badcall locks up in 2nd sibling test sometimes... only about 30% of the time.    Forktest isn't perfect, ppid isn't getting set or is deadbeef for some threads. Partially fixed waitpid badcalls    Fixed dup2    argtest works! forktest has a name    argtest is sooooooooo close./start.sh ! just give it to meeeee    Fixed some badcalls, hopefully wait still works    V parent instead of killing menu    Crash?    We cheated on this one...    This no good. Memory leaks out the wazoo    Synched process_array    added some comments    minor changes    the menu waits at last?    trying to submitMerge: 108d34c 695962d    Merge branch 'master' of ssh://src.ops-class.org/src/marksims@buffalo.edu    nothing    Autograder work maybe?    EVERYTHING FUCKING WORKS NOW    Nothing fucking works anymore./start.sh ./start.sh    Exec done! Not...    fefweff    rererf    please    please work    ........    wow, just wow.    Added submit and compile scripts    Fork done... kinda? Exit and/or Wait are fucked.    Fixed CV, partial fork    Wait and Exit done, untested    added some stuff    added files for process syscalls    added a global process array    fileonlytest working    hello world    fixed random pointer problem    forgot to add things to conf file    actually added lseek and dup2    added dup2 and lseek    Commit test    Added dependencies for close    Basic implementation of read, skeleton of write.    BS dependency issues, gonna submit anyway    Open attempt 1...    added open and close files    added some necessary stuff for ASST2    Began tracking new files    Began ASST 2, added filehandle.c/.h & filehandlelist.c/.h    Update gitignore to ignore submit patches.    Removed kprintf lines and kmalloc'ed our rwlocks :P    kprintf lines in rwlocks    resolved merge conflictMerge: 67349f4 0ccd948    added some stuff to rwlock create    Implemented RWLock testing framework. Need more meaningful tests.    trying to solve rw    working on stoplight    fixed bug in stoplight    new implementation of intersection problem    Changes to comments on stoplight    Minor change to order of leaveIntersection()    Working on stoplight, deadlocks when counter == 0    Checked writer wchan_isempty (for real this time)    Added startup script    RW locks attempt 1    Locked the wait channel for CVs    Removed backslash typo    started cv code    added ownership to lock implementation    same as last commit    still trying to fix stub code for submission to work    fixed stub code for rwlock    minor changes    wrote stub code for rw lock    minor changes    implemented semaphore solution for whale mating    started working on the whale problem    changed sys161 back to use 1 CPU    Tried to implement locks (Teeeeesst faiilledd)    Print usernames at boot.    Doing Git part of ASST0    Adding .gitignore.    Changed system name.    Refactoring spinner and yielder code.    New.    Fixes to driver code; make Eclipse shut up in thread.c.    Adding gitignore to base distribution.    Fixed a bug where unused was set but not being used    Adding file only test.    Adding fileonlytest.    Adding menu items for synch testing.    New ASST1 test.    New CV test.    Adding default and optional scheduler.    Late ASST1 fixes.    1) Cleanup code for stoplight and whalemating.    2) Menu fix to put drivers in the right place and fix ASST0 build.    Fixing root problem.    Adding rwlock templates and problem solution initialization code.    ASST1 changes.    Fix build failure in psort.c    Fix default path to root directory.    Init.
